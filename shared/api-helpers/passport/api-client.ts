// Copyright 2024 StarfleetAI
// SPDX-License-Identifier: Apache-2.0

// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/passport.idm.Idm/AddOAuth2ClientsToUsers': {
    /** Add OAuth2 clients to users */
    post: operations['Idm_AddOAuth2ClientsToUsers']
  }
  '/passport.idm.Idm/BlockUser': {
    /** Block a user */
    post: operations['Idm_BlockUser']
  }
  '/passport.idm.Idm/ConfirmUser': {
    /** Confirm user */
    post: operations['Idm_ConfirmUser']
  }
  '/passport.idm.Idm/CreatOAuth2Client': {
    /** Create a new client in auth server */
    post: operations['Idm_CreatOAuth2Client']
  }
  '/passport.idm.Idm/CreateUser': {
    /** Create a new user */
    post: operations['Idm_CreateUser']
  }
  '/passport.idm.Idm/DeclareLoggedIn': {
    /** Declare user as logged in and continue to consent request */
    post: operations['Idm_DeclareLoggedIn']
  }
  '/passport.idm.Idm/DeleteOAuth2Client': {
    /** Delete client from auth server */
    post: operations['Idm_DeleteOAuth2Client']
  }
  '/passport.idm.Idm/DenyConsent': {
    /** Deny authentication request */
    post: operations['Idm_DenyConsent']
  }
  '/passport.idm.Idm/GetConsentRequest': {
    /** Get consent request info */
    post: operations['Idm_GetConsentRequest']
  }
  '/passport.idm.Idm/GetCurrentUser': {
    /** Get current user */
    post: operations['Idm_GetCurrentUser']
  }
  '/passport.idm.Idm/GetCurrentUserRole': {
    /** Get current user's role */
    post: operations['Idm_GetCurrentUserRole']
  }
  '/passport.idm.Idm/GetOAuth2Client': {
    /** Get client info from auth server */
    post: operations['Idm_GetOAuth2Client']
  }
  '/passport.idm.Idm/GrantConsent': {
    /** Grant user's consent to authentication request */
    post: operations['Idm_GrantConsent']
  }
  '/passport.idm.Idm/ListOAuth2Clients': {
    /** List clients in auth server */
    post: operations['Idm_ListOAuth2Clients']
  }
  '/passport.idm.Idm/ListUserProfiles': {
    /** Get user profiles list */
    post: operations['Idm_ListUserProfiles']
  }
  '/passport.idm.Idm/ListUsers': {
    /** Get users list */
    post: operations['Idm_ListUsers']
  }
  '/passport.idm.Idm/LogIn': {
    /** Log in with email and password */
    post: operations['Idm_LogIn']
  }
  '/passport.idm.Idm/LogOut': {
    /** Log out (invalidate token) */
    post: operations['Idm_LogOut']
  }
  '/passport.idm.Idm/RemoveOAuth2ClientsFromUsers': {
    /** Remove OAuth2 clients from users */
    post: operations['Idm_RemoveOAuth2ClientsFromUsers']
  }
  '/passport.idm.Idm/RequestPasswordReset': {
    /** Request password reset */
    post: operations['Idm_RequestPasswordReset']
  }
  '/passport.idm.Idm/RequestResendConfirmationEmail': {
    /** Resend confirmation email */
    post: operations['Idm_RequestResendConfirmationEmail']
  }
  '/passport.idm.Idm/ResetOAuth2ClientSecret': {
    /** Reset client secret key */
    post: operations['Idm_ResetOAuth2ClientSecret']
  }
  '/passport.idm.Idm/ResetPassword': {
    /** Reset password */
    post: operations['Idm_ResetPassword']
  }
  '/passport.idm.Idm/SetUserIsInternal': {
    /** Set user is_internal flag */
    post: operations['Idm_SetUserIsInternal']
  }
  '/passport.idm.Idm/UnblockUser': {
    /** Unblock a user */
    post: operations['Idm_UnblockUser']
  }
  '/passport.idm.Idm/UnsetUserIsInternal': {
    /** Unset user is_internal flag */
    post: operations['Idm_UnsetUserIsInternal']
  }
  '/passport.idm.Idm/UpdateCurrentUser': {
    /** Update current user */
    post: operations['Idm_UpdateCurrentUser']
  }
  '/passport.idm.Idm/UpdateOAuth2Client': {
    /** Update client in auth server */
    post: operations['Idm_UpdateOAuth2Client']
  }
  '/passport.idm.Idm/UpdatePassword': {
    /** Update current user's password */
    post: operations['Idm_UpdatePassword']
  }
  '/passport.idm.Idm/UpdateUser': {
    /** Update user */
    post: operations['Idm_UpdateUser']
  }
}

export type webhooks = Record<string, never>

export interface components {
  headers: never
  parameters: never
  pathItems: never
  requestBodies: never
  responses: never
  schemas: {
    /**
     * OAuth2 client grant types
     * @enum {string}
     */
    commonClientGrantType:
      | 'CLIENT_GRANT_TYPE_AUTHORIZATION_CODE'
      | 'CLIENT_GRANT_TYPE_CLIENT_CREDENTIALS'
      | 'CLIENT_GRANT_TYPE_IMPLICIT'
      | 'CLIENT_GRANT_TYPE_PASSWORD'
      | 'CLIENT_GRANT_TYPE_REFRESH_TOKEN'
    /**
     * OAuth2 client response types
     * @enum {string}
     */
    commonClientResponseType:
      | 'CLIENT_RESPONSE_TYPE_CODE'
      | 'CLIENT_RESPONSE_TYPE_ID_TOKEN'
      | 'CLIENT_RESPONSE_TYPE_TOKEN'
    /**
     * User roles
     * @enum {string}
     */
    commonRole: 'ROLE_ADMIN' | 'ROLE_USER'
    /**
     * OAuth2 client grant types
     * @description - TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC: Default value
     * @enum {string}
     */
    commonTokenEndpointAuthMethod:
      | 'TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC'
      | 'TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST'
      | 'TOKEN_ENDPOINT_AUTH_METHOD_NONE'
      | 'TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT'
    /** OAuth2ClientSecretReset */
    idmAddOAuth2ClientsToUsersRequest: {
      clientIds?: string[]
      userIds?: string[]
    }
    /** BlockUser */
    idmBlockUserRequest: {
      id?: string
      /** Format: int32 */
      version?: number
    }
    /** ConfirmUser */
    idmConfirmUserRequest: {
      password?: string
      token?: string
    }
    idmConsentRequest: {
      clientId?: string
      clientName?: string
      requestedScopes?: string[]
      skip?: boolean
    }
    /** CreateOAuth2Client */
    idmCreateOAuth2ClientRequest: {
      allInternalUsersAllowed?: boolean
      grantTypes?: components['schemas']['commonClientGrantType'][]
      grantedScopes?: string[]
      name?: string
      redirectUri?: string[]
      responseTypes?: components['schemas']['commonClientResponseType'][]
      skipConsent?: boolean
      tokenEndpointAuthMethod?: components['schemas']['commonTokenEndpointAuthMethod']
    }
    /** CreateUser */
    idmCreateUserRequest: {
      email?: string
      firstName?: string
      lastName?: string
      position?: string
      role?: components['schemas']['commonRole']
    }
    idmDeclareLoggedInRequest: {
      challenge?: string
    }
    /** DeleteOAuth2Client */
    idmDeleteOAuth2ClientRequest: {
      id?: string
    }
    idmDenyConsentRequest: {
      challenge?: string
    }
    idmGetConsentRequestRequest: {
      challenge?: string
    }
    /** GetOAuth2Client */
    idmGetOAuth2ClientRequest: {
      id?: string
    }
    idmGrantConsentRequest: {
      challenge?: string
      grantedScopes?: string[]
      remember?: boolean
    }
    /** ListOAuth2Clients */
    idmListOAuth2ClientsRequest: {
      filter?: components['schemas']['idmListOAuth2ClientsRequestFilter']
    }
    idmListOAuth2ClientsRequestFilter: {
      userId?: string
    }
    /** ListUserProfiles */
    idmListUserProfilesRequest: {
      filter?: components['schemas']['idmListUserProfilesRequestFilter']
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      perPage?: number
    }
    idmListUserProfilesRequestFilter: {
      ids?: string[]
      query?: string
    }
    idmListUsersRequest: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      perPage?: number
      query?: string
    }
    /** LogIn */
    idmLogInRequest: {
      challenge?: string
      email?: string
      password?: string
      remember?: boolean
    }
    /** OAuth2Client */
    idmOAuth2Client: {
      allInternalUsersAllowed?: boolean
      /** Format: date-time */
      createdAt?: string
      grantTypes?: components['schemas']['commonClientGrantType'][]
      grantedScopes?: string[]
      id?: string
      name?: string
      redirectUri?: string[]
      responseTypes?: components['schemas']['commonClientResponseType'][]
      secret?: string
      skipConsent?: boolean
      tokenEndpointAuthMethod?: components['schemas']['commonTokenEndpointAuthMethod']
      /** Format: date-time */
      updatedAt?: string
    }
    idmOAuth2ClientsList: {
      clients?: components['schemas']['idmOAuth2Client'][]
    }
    idmRedirectToResponse: {
      redirectTo?: string
    }
    /** RemoveOAuth2ClientsFromUsersRequest */
    idmRemoveOAuth2ClientsFromUsersRequest: {
      clientIds?: string[]
      userIds?: string[]
    }
    /** RequestPasswordReset */
    idmRequestPasswordResetRequest: {
      email?: string
    }
    /** RequestResendConfirmationEmail */
    idmRequestResendConfirmationEmailRequest: {
      id?: string
      /** Format: int32 */
      version?: number
    }
    /** ResetOAuth2ClientSecretRequest */
    idmResetOAuth2ClientSecretRequest: {
      id?: string
    }
    /** ResetPassword */
    idmResetPasswordRequest: {
      password?: string
      token?: string
    }
    /** SetUserIsInternal */
    idmSetUserIsInternalRequest: {
      id?: string
      /** Format: int32 */
      version?: number
    }
    /** UnblockUser */
    idmUnblockUserRequest: {
      id?: string
      /** Format: int32 */
      version?: number
    }
    /** UnsetUserIsInternal */
    idmUnsetUserIsInternalRequest: {
      id?: string
      /** Format: int32 */
      version?: number
    }
    /** UpdateCurrentUser */
    idmUpdateCurrentUserRequest: {
      firstName?: string
      lastName?: string
      /** Format: int32 */
      version?: number
    }
    /** UpdateOAuth2Client */
    idmUpdateOAuth2ClientRequest: {
      grantTypes?: components['schemas']['commonClientGrantType'][]
      grantedScopes?: string[]
      id?: string
      name?: string
      redirectUri?: string[]
      responseTypes?: components['schemas']['commonClientResponseType'][]
      skipConsent?: boolean
      tokenEndpointAuthMethod?: components['schemas']['commonTokenEndpointAuthMethod']
    }
    /** UpdatePassword */
    idmUpdatePasswordRequest: {
      newPassword?: string
      oldPassword?: string
      /** Format: int32 */
      version?: number
    }
    idmUpdateUserRequest: {
      email?: string
      firstName?: string
      id?: string
      lastName?: string
      position?: string
      role?: components['schemas']['commonRole']
      /** Format: int32 */
      version?: number
    }
    /** User */
    idmUser: {
      /** Format: date-time */
      blockedAt?: string
      /** Format: date-time */
      confirmedAt?: string
      /** Format: date-time */
      createdAt?: string
      email?: string
      firstName?: string
      id?: string
      isInternal?: boolean
      lastName?: string
      position?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: int32 */
      version?: number
    }
    /** UserProfile */
    idmUserProfile: {
      blocked?: boolean
      email?: string
      firstName?: string
      id?: string
      lastName?: string
      position?: string
    }
    idmUserProfilesList: {
      userProfiles?: components['schemas']['idmUserProfile'][]
    }
    /** User's role in `Idm` */
    idmUserRole: {
      role?: components['schemas']['commonRole']
    }
    idmUsersListResponse: {
      users?: components['schemas']['idmUser'][]
    }
    protobufAny: {
      '@type'?: string
      [key: string]: Record<string, never> | undefined
    }
    rpcStatus: {
      /** Format: int32 */
      code?: number
      details?: components['schemas']['protobufAny'][]
      message?: string
    }
  }
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Add OAuth2 clients to users */
  Idm_AddOAuth2ClientsToUsers: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmAddOAuth2ClientsToUsersRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Block a user */
  Idm_BlockUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmBlockUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Confirm user */
  Idm_ConfirmUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmConfirmUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Create a new client in auth server */
  Idm_CreatOAuth2Client: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmCreateOAuth2ClientRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmOAuth2Client']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Create a new user */
  Idm_CreateUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmCreateUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Declare user as logged in and continue to consent request */
  Idm_DeclareLoggedIn: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmDeclareLoggedInRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmRedirectToResponse']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Delete client from auth server */
  Idm_DeleteOAuth2Client: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmDeleteOAuth2ClientRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Deny authentication request */
  Idm_DenyConsent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmDenyConsentRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmRedirectToResponse']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get consent request info */
  Idm_GetConsentRequest: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmGetConsentRequestRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmConsentRequest']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get current user */
  Idm_GetCurrentUser: {
    requestBody: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get current user's role */
  Idm_GetCurrentUserRole: {
    requestBody: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUserRole']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get client info from auth server */
  Idm_GetOAuth2Client: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmGetOAuth2ClientRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmOAuth2Client']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Grant user's consent to authentication request */
  Idm_GrantConsent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmGrantConsentRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmRedirectToResponse']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** List clients in auth server */
  Idm_ListOAuth2Clients: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmListOAuth2ClientsRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmOAuth2ClientsList']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get user profiles list */
  Idm_ListUserProfiles: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmListUserProfilesRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUserProfilesList']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Get users list */
  Idm_ListUsers: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmListUsersRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUsersListResponse']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Log in with email and password */
  Idm_LogIn: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmLogInRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmRedirectToResponse']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Log out (invalidate token) */
  Idm_LogOut: {
    requestBody: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Remove OAuth2 clients from users */
  Idm_RemoveOAuth2ClientsFromUsers: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmRemoveOAuth2ClientsFromUsersRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Request password reset */
  Idm_RequestPasswordReset: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmRequestPasswordResetRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Resend confirmation email */
  Idm_RequestResendConfirmationEmail: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmRequestResendConfirmationEmailRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Reset client secret key */
  Idm_ResetOAuth2ClientSecret: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmResetOAuth2ClientSecretRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmOAuth2Client']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Reset password */
  Idm_ResetPassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmResetPasswordRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Set user is_internal flag */
  Idm_SetUserIsInternal: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmSetUserIsInternalRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Unblock a user */
  Idm_UnblockUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUnblockUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Unset user is_internal flag */
  Idm_UnsetUserIsInternal: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUnsetUserIsInternalRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Update current user */
  Idm_UpdateCurrentUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUpdateCurrentUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Update client in auth server */
  Idm_UpdateOAuth2Client: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUpdateOAuth2ClientRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmOAuth2Client']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Update current user's password */
  Idm_UpdatePassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUpdatePasswordRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
  /** Update user */
  Idm_UpdateUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['idmUpdateUserRequest']
      }
    }
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['idmUser']
        }
      }
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus']
        }
      }
    }
  }
}
